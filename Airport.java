import java.util.ArrayList;

public class Airport {
    //A list of the flights into and out of this airport. Guaranteed not to be null and to contain only non-null entries//
    private ArrayList<Flight> allFlights;

    //Constructor
    public Airport(ArrayList<Flight> allFlights) {
        this.allFlights = allFlights;
    }

    /** Returns the revenue generated by all flights at the airport, as described in part (a) */
    public double getTotalRevenue() {
        double sum = 0;
        for (Flight flight: allFlights) {
            if (flight.getCapacity() < flight.getNumPassengers()) {
                sum += (flight.getCapacity() * flight.getPrice());
            } else {
                sum += (flight.getNumPassengers() * flight.getPrice());
            }
        }
        return sum;
    }

/** Updates the list of flights by removing certain flights and returns the total number of
  *   passengers whose flights were removed, as described in part (b)
 */
    public int updateFlights() {
        int removedPassengers = 0;
        for (int i = 0; i < allFlights.size(); i++) {
            double ratio = (double) allFlights.get(i).getNumPassengers() / allFlights.get(i).getCapacity();
            if (ratio < 0.2) {
                removedPassengers += allFlights.get(i).getNumPassengers();
                allFlights.remove(i);
                i--;
            }
        }
        return removedPassengers;
    }   

}
